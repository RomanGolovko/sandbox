using System;

namespace ExplosionDanger.BLL
{
    public class OverpressureCalculationWithOut
    {
        double P0 = 101.3;                  // начальное давление, кПа (допускается принимать таким, что равняется 101,3 кПа);
        double Vo = 22.413;                 // мольный объем, который равняется 22,413 м^3• кмоль^(-1);
        double Cр = 1.01 * Math.Pow(10, 3); // теплоемкость воздуха, Дж * кг^-1 * К^-1,(допускается принимать равной 1,01 * 10^3);
        double Kн = 3;                      // коэффициент, который учитывает негерметичность помещения 
                                            // и неадиабатичность процесса горения.Допускается принимать Кн равным 3;

        public bool ГГflag { get; set; }    // флаг ГГ или ЛВЖ и ГЖ;

        public double Hт { get; set; }      // теплота сгорания, Дж • кг^-1;
        public double Z { get; set; }       // коэффициент участия ГГ или паров во взрыве, который может быть рассчитан
                                            // на основании характера распределения газов и паров в объеме помещения 
                                            // согласно Приложения к этим нормам. Допускается принимать значение Z по таблице 2;
        public double Vсвоб { get; set; }   // свободный объем помещения, м^3;
        public double Pв { get; set; }      // плотность воздуха до взрыва при начальной температуре То, кг*м^-3;
        public double T0 { get; set; }      // начальная температура воздуха, К;

        public double Aв { get; set; }       // кратность воздухообмена, которую создает аварийная вентиляция, с^-1;
        public double τ { get; set; }       // продолжительность поступления ГГ и паров ЛВЖ и ГЖ в объем помещения, с
                                            // (принимается по п. 7.1.2);

        public double M { get; set; }       // молярная масса, кг * кмоль^(-1);
        public double P1 { get; set; }      //  давление в аппарате, кПа;
        public double V { get; set; }       // объем аппарата, м^3; 
        public double q { get; set; }       // расход газа, который определяют согласно технологическому регламенту в зависимости 
                                            // от давления в трубопроводе, его диаметра, температуры газовой среды и т.п., м^3*с^-1;
        public double τ712 { get; set; }    //  время, которое определяют по п. 7.1.2, с;
        public double P2 { get; set; }      // максимальное давление в трубопроводе по технологическому регламенту, кПа; 
        public double r { get; set; }       // внутренний радиус трубопроводов, м; 
        public double L { get; set; }       // длина трубопроводов от аварийного аппарата до задвижек, м; 

        public double tp { get; set; }      // расчетная температура, °С;
        public double Nc { get; set; }      // число атомов C в молекуле ГГ или паров ГЖ;
        public double Nh { get; set; }      // число атомов H в молекуле ГГ или паров ГЖ;
        public double No { get; set; }      // число атомов O в молекуле ГГ или паров ГЖ;
        public double Nx { get; set; }      // число атомов галогенов в молекуле ГГ или паров ГЖ;
        public double W { get; set; }       // интенсивность испарения;
        public double Fи { get; set; }      // площадь испарения, м^2;
        public double τисп { get; set; }    // продолжительность испарения, с;
        public double η { get; set; }       // коэффициент, который принимают по таблице 3 в зависимости от скорости воздушного потока, 
                                            // который создается аварийной вентиляцией, и температуры воздушного потока над
                                            // поверхностью испарения(в случае отсутствия аварийной вентиляции η равняется 1)
        public double Pн { get; set; }      // давление насыщенного пара при расчетной температуре жидкости tр определенное по
                                            // справочным данным в соответствии с требованиями п. 5.4, кПа;
        public double A { get; set; }       // константа Антуана
        public double B { get; set; }       // константа Антуана
        public double C { get; set; }       // константа Антуана

        public double ΔP()
        {
            return ((m() * Hт * P0 * Z) / (Vсвоб * Pв * Cр * T0)) * (1 / Kн);
        }

        double K()
        {
            return Aв * τ + 1;
        }

        double m()
        {
            return (ГГflag) ? (Vа() + Vт()) * Pгп() : mж() + mемк() + mсв();
        }
        double Pгп()
        {
            return M / (Vo * (1 + 0.00367 * tp));
        }

        double Vа()
        {
            return (P1 / P0) * V;
        }
        double Vт()
        {
            return V1т() + V2т();
        }
        double V1т()
        {
            return q * τ712;
        }
        double V2т()
        {
            return Math.PI * (P2 / P0) * V * (Math.Pow(r, 2) * L);
        }

        double mсв()
        {
            return (W == 0) ? SetW() * Fи * τисп : W * Fи * τисп;
        }
        double mемк()
        {
            return (W == 0) ? SetW() * Fи * τисп : W * Fи * τисп;
        }
        double mж()
        {
            return (W == 0) ? SetW() * Fи * τисп : W * Fи * τисп;
        }

        double SetW()
        {
            return (Pн == 0) ? Math.Pow(10, -6) * η * Math.Pow(M / 1000, (1.0 / 2.0)) * SetPн()
                             : Math.Pow(10, -6) * η * Math.Pow(M / 1000, (1.0 / 2.0)) * Pн;
        }

        double SetPн()
        {
            return 0.133 * Math.Pow(10, (A - (B / (C + tp))));
        }
    }
}
